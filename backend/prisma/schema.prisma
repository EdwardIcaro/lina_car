generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id     String    @id @default(cuid())
  name   String
  phone  String    @unique
  createdAt DateTime @default(now())
  vehicles Vehicle[]
}

model Vehicle {
  id        String   @id @default(cuid())
  plate     String   @unique // A placa é o identificador único do veículo
  make      String   // Marca (ex: Toyota)
  model     String   // Modelo (ex: Corolla)
  color     String
  createdAt DateTime @default(now())

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  workOrders WorkOrder[]
}

model Service {
  id    String  @id @default(cuid())
  name  String
  price Float
  type  String  // 'carro' ou 'moto'
  // workOrders removido
  @@unique([name, type])
}

model Employee {
  id         String   @id @default(cuid())
  name       String
  percentage Float    // Porcentagem de ganho do funcionário
  createdAt  DateTime @default(now())
  workOrders WorkOrder[]
  cashMovements CashMovement[] // Relação com movimentações de caixa
}

model WorkOrder {
  id         String   @id @default(cuid())
  status     String   @default("AWAITING")
  totalPrice Float
  createdAt  DateTime @default(now())
  finishedAt DateTime? // Data/hora de finalização da ordem
  customService String? // Campo para serviços customizados
  employeePercentage Float? // Porcentagem de ganho do funcionário usada nesta ordem
  isLocaliza Boolean @default(false)

  vehicle    Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId  String?

  payments   Payment[]

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?
}

model Payment {
  id          String   @id @default(cuid())
  method      String   // 'pix', 'cash', 'debit', 'credit'
  amount      Float
  // received removido
  // change removido
  createdAt   DateTime @default(now())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  workOrderId String
}

// model ServicesOnWorkOrders removido

// Configurações da Localiza
model LocalizaConfig {
  id          String   @id @default(cuid())
  name        String   @default("Padrão")
  value       String   @default("default")
  percentage  Float    @default(30)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  services    LocalizaService[]
}

// Serviços específicos da Localiza
model LocalizaService {
  id              String         @id @default(cuid())
  name            String         // Nome do serviço
  price           Float          // Preço do serviço
  // isActive removido
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  localizaConfig  LocalizaConfig @relation(fields: [localizaConfigId], references: [id])
  localizaConfigId String
} 

// Movimentações do Caixa
model CashMovement {
  id          String   @id @default(cuid())
  type        String   // 'entrada' ou 'saida'
  amount      Float
  // reason removido
  // withdrawType removido
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  closedAt    DateTime? // Data/hora do fechamento do caixa (apenas para abertura)
  observation String? // Observação do fechamento de caixa

  employee    Employee? @relation(fields: [employeeId], references: [id])
  employeeId  String?
} 

model Product {
  id        String   @id @default(cuid())
  name      String
  // category removido
  // unit removido
  // minStock removido
  // notes removido
  // stock removido
  movements ProductMovement[]
}

model ProductMovement {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  type      String   // 'entrada' ou 'saida'
  // amount removido
  // reason removido
  createdAt DateTime @default(now())
}
