{"ast":null,"code":"import React,{useState,useRef}from\"react\";import Tesseract from\"tesseract.js\";import\"./PlateReader.css\";import{FaCamera}from'react-icons/fa';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const PlateReader=_ref=>{let{onPlateRecognized}=_ref;const[isLoading,setIsLoading]=useState(false);const[videoStream,setVideoStream]=useState(null);const[error,setError]=useState(\"\");const[videoReady,setVideoReady]=useState(false);const videoRef=useRef(null);const canvasRef=useRef(null);const startCamera=async()=>{setError(\"\");try{const stream=await navigator.mediaDevices.getUserMedia({video:{facingMode:\"environment\"}});setVideoStream(stream);setVideoReady(false);if(videoRef.current){videoRef.current.srcObject=stream;console.log('Câmera ativada, stream:',stream);}}catch(err){setError(\"Permissão da câmera negada ou não disponível.\");console.error('Erro ao acessar a câmera:',err);}};const stopCamera=()=>{if(videoStream){videoStream.getTracks().forEach(track=>track.stop());setVideoStream(null);}};const takePicture=async()=>{if(!videoRef.current||!canvasRef.current)return;const video=videoRef.current;if(!video.videoWidth||!video.videoHeight){setError(\"Câmera não está pronta. Aguarde a imagem aparecer antes de capturar.\");return;}const canvas=canvasRef.current;canvas.width=video.videoWidth;canvas.height=video.videoHeight;const ctx=canvas.getContext(\"2d\");ctx.drawImage(video,0,0,canvas.width,canvas.height);const imageData=canvas.toDataURL(\"image/png\");stopCamera();await recognizePlate(imageData);};const recognizePlate=async imageData=>{setIsLoading(true);setError(\"\");try{const{data:{text}}=await Tesseract.recognize(imageData,\"por\",{logger:m=>console.log(m)});const cleanedText=text.replace(/[^A-Za-z0-9]/g,\"\").toUpperCase();if(onPlateRecognized){onPlateRecognized(cleanedText);}}catch(err){setError(\"Erro ao processar OCR. Tente novamente.\");}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center'},children:[error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-text\",children:error}),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"loading-text\",children:\"Processando...\"}),!videoStream&&!isLoading&&/*#__PURE__*/_jsx(\"button\",{className:\"plate-reader-icon-btn\",onClick:startCamera,title:\"Ler Placa com C\\xE2mera\",style:{border:'none',background:'none',cursor:'pointer',padding:0},children:/*#__PURE__*/_jsx(FaCamera,{size:38,color:\"#1976d2\"})}),videoStream&&!isLoading&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"video\",{ref:videoRef,className:\"plate-reader-video\",autoPlay:true,playsInline:true,style:{marginBottom:10,background:'#222'},onLoadedMetadata:()=>setVideoReady(true)}),!videoReady&&/*#__PURE__*/_jsx(\"div\",{style:{color:'#d32f2f',marginBottom:8},children:\"Aguardando c\\xE2mera carregar...\"}),/*#__PURE__*/_jsx(\"button\",{className:\"plate-reader-button\",onClick:takePicture,disabled:!videoReady,children:\"Capturar Placa\"})]}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{display:\"none\"}})]});};export default PlateReader;","map":{"version":3,"names":["React","useState","useRef","Tesseract","FaCamera","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","PlateReader","_ref","onPlateRecognized","isLoading","setIsLoading","videoStream","setVideoStream","error","setError","videoReady","setVideoReady","videoRef","canvasRef","startCamera","stream","navigator","mediaDevices","getUserMedia","video","facingMode","current","srcObject","console","log","err","stopCamera","getTracks","forEach","track","stop","takePicture","videoWidth","videoHeight","canvas","width","height","ctx","getContext","drawImage","imageData","toDataURL","recognizePlate","data","text","recognize","logger","m","cleanedText","replace","toUpperCase","style","display","justifyContent","alignItems","children","className","onClick","title","border","background","cursor","padding","size","color","ref","autoPlay","playsInline","marginBottom","onLoadedMetadata","disabled"],"sources":["C:/Users/Lenovo/lina_car/frontend/src/components/OCR/PlateReader.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Tesseract from \"tesseract.js\";\r\nimport \"./PlateReader.css\";\r\nimport { FaCamera } from 'react-icons/fa';\r\n\r\nconst PlateReader = ({ onPlateRecognized }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [videoStream, setVideoStream] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [videoReady, setVideoReady] = useState(false);\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const startCamera = async () => {\r\n    setError(\"\");\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: { facingMode: \"environment\" }\r\n      });\r\n      setVideoStream(stream);\r\n      setVideoReady(false);\r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n        console.log('Câmera ativada, stream:', stream);\r\n      }\r\n    } catch (err) {\r\n      setError(\"Permissão da câmera negada ou não disponível.\");\r\n      console.error('Erro ao acessar a câmera:', err);\r\n    }\r\n  };\r\n\r\n  const stopCamera = () => {\r\n    if (videoStream) {\r\n      videoStream.getTracks().forEach(track => track.stop());\r\n      setVideoStream(null);\r\n    }\r\n  };\r\n\r\n  const takePicture = async () => {\r\n    if (!videoRef.current || !canvasRef.current) return;\r\n    const video = videoRef.current;\r\n    if (!video.videoWidth || !video.videoHeight) {\r\n      setError(\"Câmera não está pronta. Aguarde a imagem aparecer antes de capturar.\");\r\n      return;\r\n    }\r\n    const canvas = canvasRef.current;\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n    const imageData = canvas.toDataURL(\"image/png\");\r\n    stopCamera();\r\n    await recognizePlate(imageData);\r\n  };\r\n\r\n  const recognizePlate = async (imageData) => {\r\n    setIsLoading(true);\r\n    setError(\"\");\r\n    try {\r\n      const { data: { text } } = await Tesseract.recognize(imageData, \"por\", {\r\n        logger: m => console.log(m)\r\n      });\r\n      const cleanedText = text.replace(/[^A-Za-z0-9]/g, \"\").toUpperCase();\r\n      if (onPlateRecognized) {\r\n        onPlateRecognized(cleanedText);\r\n      }\r\n    } catch (err) {\r\n      setError(\"Erro ao processar OCR. Tente novamente.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n      {error && <div className=\"error-text\">{error}</div>}\r\n      {isLoading && <div className=\"loading-text\">Processando...</div>}\r\n      {!videoStream && !isLoading && (\r\n        <button\r\n          className=\"plate-reader-icon-btn\"\r\n          onClick={startCamera}\r\n          title=\"Ler Placa com Câmera\"\r\n          style={{ border: 'none', background: 'none', cursor: 'pointer', padding: 0 }}\r\n        >\r\n          <FaCamera size={38} color=\"#1976d2\" />\r\n        </button>\r\n      )}\r\n      {videoStream && !isLoading && (\r\n        <>\r\n          <video\r\n            ref={videoRef}\r\n            className=\"plate-reader-video\"\r\n            autoPlay\r\n            playsInline\r\n            style={{ marginBottom: 10, background: '#222' }}\r\n            onLoadedMetadata={() => setVideoReady(true)}\r\n          />\r\n          {!videoReady && (\r\n            <div style={{ color: '#d32f2f', marginBottom: 8 }}>\r\n              Aguardando câmera carregar...\r\n            </div>\r\n          )}\r\n          <button className=\"plate-reader-button\" onClick={takePicture} disabled={!videoReady}>\r\n            Capturar Placa\r\n          </button>\r\n        </>\r\n      )}\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nPlateReader.propTypes = {\r\n  onPlateRecognized: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PlateReader; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}